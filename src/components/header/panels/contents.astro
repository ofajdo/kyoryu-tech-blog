---
const { panel } = Astro.props;
const headings = panel?.data?.headings;
---

<h1>目次</h1>

<ul class="py-2">
  {
    headings &&
      headings.map(
        ({
          depth,
          slug,
          text,
        }: {
          depth: number;
          slug: string;
          text: string;
        }) => {
          return (
            <li class={"py-1 depth-" + depth}>
              <a href={"#" + slug} data-toc-link={slug} class="py-1 px-2">
                {text}
              </a>
            </li>
          );
        },
      )
  }
</ul>

<style>
  .depth-2 {
    padding-left: var(--spacing-1);
  }
  .depth-3 {
    padding-left: var(--spacing-3);
  }
  .depth-4 {
    padding-left: var(--spacing-5);
  }
  .depth-5,
  .depth-6 {
    padding-left: var(--spacing-6);
  }

  a {
    width: 100%;
    display: inline-block;
    border-radius: var(--border-radius-1);
  }

  a:hover {
    background-color: var(--color-gray-150);
  }
  .is-active-toc {
    background-color: var(--color-gray-150);
  }
  .is-active-toc:hover {
    background-color: var(--color-gray-200);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tocLinks = document.querySelectorAll("[data-toc-link]");
    const headings = document.querySelectorAll(
      "h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]",
    );

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocLink = document.querySelector(
            `[data-toc-link][href="#${id}"]`,
          );

          if (entry.isIntersecting) {
            // すべてのリンクから active を外す
            tocLinks.forEach((link) => link.classList.remove("is-active-toc"));
            // 対象のリンクに active を追加
            if (tocLink) tocLink.classList.add("is-active-toc");
          }
        });
      },
      {
        rootMargin: "0px 0px -90% 0px", // 上部から10%の位置で発火（調整可）
        threshold: 0.1,
      },
    );

    headings.forEach((heading) => observer.observe(heading));

    tocLinks.forEach((link) => {
      link.addEventListener("click", () => {
        setTimeout(() => {
          if (
            window.matchMedia &&
            window.matchMedia("(max-width: 768px)").matches
          ) {
            const active_button = document.querySelector(
              "button.is-panel-active",
            );

            const active_button_name = (active_button as HTMLElement | null)
              ?.dataset?.name;

            active_button?.classList.toggle("is-panel-active");

            if (active_button_name) {
              document
                .getElementById(active_button_name)
                ?.classList.toggle("is-panel-active");
            }
          }
        }, 100);
      });
    });
  });
</script>
