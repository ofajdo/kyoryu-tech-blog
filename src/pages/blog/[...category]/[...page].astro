---
import { getCollection } from "astro:content";
import ArticleListLayout from "./../../../layouts/ArticleListLayout.astro";

export async function getStaticPaths({ paginate }: { paginate: Function }) {
  const posts = await getCollection("blog");
  const categorys = posts
    .map((post: any) => {
      return post.data.category;
    })
    .filter(
      (element, index, self) =>
        self.findIndex((e) => e.slug === element.slug) === index,
    );
  return categorys.flatMap((category: any) => {
    const filtered_posts = posts.filter(
      (post: any) => post.data.category.slug === category.slug,
    );
    return paginate(filtered_posts, {
      params: {
        category: category.slug,
      },
      props: {
        category: category,
      },
      pageSize: 10,
    });
  });
}

interface Page<T = any> {
  data: T[];
  start: number;
  end: number;
  total: number;
  currentPage: number;
  size: number;
  lastPage: number;
  url: {
    current: string;
    prev: string | undefined;
    next: string | undefined;
    first: string | undefined;
    last: string | undefined;
  };
}
const {
  page,
  category,
}: { page?: Page; category?: { name: string; slug: string } } = Astro.props;
const posts = page?.data;
---

<ArticleListLayout
  posts={posts}
  icon={"mdi:folder-outline"}
  title={category?.name}
  page={page}
  panels={[
    {
      name: "contents",
      icon: "mdi:table-of-contents",
      state: "is-panel-active",
      label: "目次のパネル",
      type: "contents",
    },
    {
      name: "pages",
      icon: "gridicons:pages",
      state: "",
      label: "いろいろな記事のパネル",
      type: "posts",
    },
    {
      name: "search",
      icon: "mdi:search",
      state: "",
      label: "検索パネル",
      type: "search",
    },
    {
      name: "setting",
      icon: "mdi:settings-outline",
      state: "",
      label: "サイトの設定",
      type: "setting",
    },
  ]}
/>
